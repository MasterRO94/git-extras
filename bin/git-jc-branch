#!/usr/bin/env bash

function safeExit() {
  exit 0
}

function error() {
  exit 1;
}

############## Default values ###################
scriptName="git jc-branch"
scriptArgs="<shortDescription>"
namePrefix=feature/
parentBranch=develop
args=()


############## Main Script Here ###################

function handle() {

if [ -z "${args[0]}" ]
then
  echo -e 'ERROR! Issue short description is missing.\n';
  usage;
  error;
fi;

echo 'Fetching remote changes...';
git fetch;

branchName="${namePrefix}${args[0]}";

echo '---------------------------------------';
echo "Creating [${branchName}] branch of [origin/${parentBranch}]...";
git switch -c ${branchName} origin/${parentBranch};

echo '---------------------------------------';
echo 'Push and set it upstream...';
git push --set-upstream origin ${branchName};

}

############## Begin Options and Usage ###################

# Print usage
usage() {
  echo -n "${scriptName} [OPTIONS] ${scriptArgs}

Creates feature branch off of origin/develop.

Options:
  -h, --help        Display this help and exit
  -p, --prefix      Branch name prefix, default 'feature/'
  -s, --src         Parent branch
"
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i=1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
# [[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safeExit ;;
    -p|--prefix) shift; namePrefix=${1} ;;
    -s|--src) shift; parentBranch=${1} ;;
    --endopts) shift; break ;;
    *) die "invalid option: '$1'." ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

############## End Options and Usage ###################


############## Script Run Code ###################

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Run your script
handle

# Exit cleanly
safeExit
